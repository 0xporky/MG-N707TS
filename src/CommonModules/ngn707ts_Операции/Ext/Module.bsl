
#Область ПрограммныйИнтерфейс

// Возвращает структуру из данными параметров касового апарата
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - имя или ip-адрес кассового апарата.
//		* Логин  - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//	Структура - содержит поля статуса апарата.
//
Функция ЗапросСтатусКассовогоАппарата(ПараметрыПодключения) Экспорт
	
	URL 	= "cgi/status";
	Метод   = "GET";
	
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	РезультатЗапроса = Новый Структура;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			КлючСтруктуры = ЧтениеJSON.ТекущееЗначение;
			РезультатЗапроса.Вставить(КлючСтруктуры, ПрочитатьЗначениеСвойстваJSON(ЧтениеJSON));
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Открывает кассовую смену (путем печати нулевого фискального чека).
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - имя или ip-адрес кассового апарата.
//		* Логин  - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//	Истина - нулевой чек удалось распечатать, Ложь - возникли ошибки.
//
Функция ОткрытьКассовуюСмену(ПараметрыПодключения) Экспорт
	
	URL 			= "cgi/chk";
	Метод   		= "POST";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	ТелоЗапроса 	= "{""F"":[{""C"":{""cm"":""НУЛЬОВИЙ ЧЕК""}}]}";
	
	Заголовки = СоответствиеЗаголовков();
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Чтение текущей чековой ленты.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//	Строка - содержит результат чтения (в формате JSON), Неопределено - если возникла ошибка.
//
Функция ПрочитатьЧековуюЛенту(ПараметрыПодключения) Экспорт
	
	URL 			= "cgi/chk";
	Метод   		= "GET";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

// Служебное внесение денег в сейф.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//	СуммаСлужебнойОперации - Число - сумма которая будет вносится в сейф.
//	ИмяПользователя - Строка - имя кассира, который проводит операцию.
//
// Возвращаемое значение:
//  Истина - операция выполнена успешно, Ложь - возникли ошибки.
//
Функция СлужебноеВнесение(ПараметрыПодключения, СуммаСлужебнойОперации, ИмяПользователя) Экспорт
	Возврат ВнестиИзъятьДеньгиИзСейфа(ПараметрыПодключения, СуммаСлужебнойОперации, ИмяПользователя, Ложь);	
КонецФункции

// Служебное изъятие денег из сейфа.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - имя или ip-адрес кассового апарата.
//		* Логин  - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//	СуммаСлужебнойОперации - Число - сумма которая будет изыматься из сейфа.
//	ИмяПользователя - Строка - имя кассира, который проводит операцию.
//
// Возвращаемое значение:
//  Истина - операция выполнена успешно, Ложь - возникли ошибки.
//
Функция СлужебнаяВыдача(ПараметрыПодключения, СуммаСлужебнойОперации, ИмяПользователя) Экспорт
	Возврат ВнестиИзъятьДеньгиИзСейфа(ПараметрыПодключения, СуммаСлужебнойОперации, ИмяПользователя, Истина);	
КонецФункции

// Печать Х отчета.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//  Истина - операция выполнена успешно, Ложь - возникли ошибки.
//
Функция Печать_X_Отчет(ПараметрыПодключения) Экспорт 
	
	URL 			= "cgi/proc/printreport?10";
	Метод   		= "GET";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Печать Z отчета.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//  Истина - операция выполнена успешно, Ложь - возникли ошибки.
//
Функция Печать_Z_Отчет(ПараметрыПодключения) Экспорт
	
	URL				= "cgi/proc/printreport?0";
	Метод   		= "GET";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет печать фискального чека.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//	ТаблицаНоменклатуры - ТаблицаЗначений - содержит колонки:
//		* Цена 						- Число 	- цена товара для которого необходимо пробить чек.
//		* Количество				- Число 	- количество товара для которое необходимо перенести в чек.
//		* НаименованиеНоменклатуры 	- Строка 	- наименование товара, который попадает в чек.
//		* КодНоменклатуры 			- Строка 	- код номенклатуры.
//		* ЗначениеНалоговойГруппы 	- Число 	- значение налоговой группы.
//		* ЕстьСкидка				- ПеречислениеСсылка.ngn707ts_ТипыСкидок - признак использования скидок / наценок.
//		* СуммаСкидки				- Число		- сумма предоставляемой скидки.
//		* ПроцентСкидки				- Число		- процент предоставляемой скидки.
//	ПараметрыОплаты - Структура - содержит свойства:
//		* СуммаОплаты - Число - сумма которую необходимо провести по оплате.
//		* НомерСтрокиНастройкиОплаты - Число - номер типа оплаты, можно узнать в настройках КА.
//		* НомерТранзакции - Строка - идентификатор банковской транзакции (из банковского терминала).
//		* НомерБанковскойКарты - Строка - номер банковской карты из которой проводили оплату.
//	ИмяПользователя - Строка - имя кассира, который проводит операцию.
//	ВозвратныйЧек - Булево - если Истина - проводим фискальный чек на продажу, если Ложь - проводим возврат.
//
// Возвращаемое значение:
//  Истина - операция выполнена успешно, Ложь - возникли ошибки.
//
Функция ПробитьФискальныйЧек(ПараметрыПодключения, ТаблицаНоменклатуры, ПараметрыОплаты, ИмяПользователя, ВозвратныйЧек = Ложь) Экспорт
	
	URL 			= "cgi/chk";
	Метод   		= "POST";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	ТелоЗапроса		= ТелоЗапросаФискальныйЧек(ТаблицаНоменклатуры, ПараметрыОплаты, ИмяПользователя, ВозвратныйЧек);
	
	Заголовки = СоответствиеЗаголовков();
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Возвращает таблицу налогов кассового аппарата.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений с колонками:
//		* НомерНалога - Число - номер налога из настроек кассового аппарата.
//		* ПроцентНалога - Число - процент налога.
//		* ПроцентСбора - Число - процент сбора.
//
Функция ТаблицаНалогов(ПараметрыПодключения) Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("НомерНалога", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), НСтр("ru='Номер налога'; uk='Номер податку'"));
	ТаблицаНалогов.Колонки.Добавить("ПроцентНалога", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)), НСтр("ru='Процент налога'; uk='Процент податку'"));
	ТаблицаНалогов.Колонки.Добавить("ПроцентСбора", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), НСтр("ru='Процент сбора'; uk='Процент сбору'"));
	
	URL 	= "cgi/tbl/Tax";
	Метод   = "GET";
	
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	
	НоваяСтрока = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			НоваяСтрока = ТаблицаНалогов.Добавить();
		КонецЕсли;
		
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если ЧтениеJSON.ТекущееЗначение = "id" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.НомерНалога = Число(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ЧтениеJSON.ТекущееЗначение = "Prc" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.ПроцентНалога = Число(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ЧтениеJSON.ТекущееЗначение = "Extra" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.ПроцентСбора = Число(ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНалогов;
	
КонецФункции

// Возвращает таблицу видов оплаты из кассового аппарата.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - Строка - имя или ip-адрес кассового апарата.
//		* Логин  - Строка - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - Строка - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений с колонками:
//		* НомерВидаОплаты - Число - номер вида оплаты.
//		* ФлагиСвойствОплаты - Число - настройки свойство оплаты из кассового аппарата.
//		* НазваниеВидаОплаты - Строка - название вида оплаты.
//
Функция ТаблицаВидовОплаты(ПараметрыПодключения) Экспорт
	
	ТаблицаВидовОплат = Новый ТаблицаЗначений;
	ТаблицаВидовОплат.Колонки.Добавить("НомерВидаОплаты", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), НСтр("ru='Номер вида оплаты'; uk='Номер виду оплаты'"));	
	ТаблицаВидовОплат.Колонки.Добавить("ФлагиСвойствОплаты", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), НСтр("ru='Флаги свойств оплаты'; uk='Прапорці властивостей оплати'"));	
	ТаблицаВидовОплат.Колонки.Добавить("НазваниеВидаОплаты", Новый ОписаниеТипов("Строка"), НСтр("ru='Название вида оплаты'; uk='Назва виду оплаты'"));
	
	URL 	= "cgi/tbl/Pay";
	Метод   = "GET";
	
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	
	НоваяСтрока = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			НоваяСтрока = ТаблицаВидовОплат.Добавить();
		КонецЕсли;
		
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если ЧтениеJSON.ТекущееЗначение = "id" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.НомерВидаОплаты = Число(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ЧтениеJSON.ТекущееЗначение = "Param" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.ФлагиСвойствОплаты = Число(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ЧтениеJSON.ТекущееЗначение = "Name" Тогда
				ЧтениеJSON.Прочитать();
				НоваяСтрока.НазваниеВидаОплаты = ЧтениеJSON.ТекущееЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВидовОплат;
	
КонецФункции



// Возвращает структуру оплаты для последующей
// отправки данных в кассовый аппарат.
//
// Возвращаемое значение:
//	Структура - содержит свойства:
//		* СуммаОплаты - Число - сумма которую пробиваем в чек.
//		* НомерСтрокиНастройкиОплаты - Число - номер из таблицы видов оплаты.
//		* НомерТранзакции - Строка - номер транзакции из банковского терминала.
//		* НомерБанковскойКарты - Строка - номер банковской карты клиента.
//
Функция СтруктураОплаты() Экспорт
	
	СтруктураОплаты = Новый Структура;
	СтруктураОплаты.Вставить("СуммаОплаты");
	СтруктураОплаты.Вставить("НомерСтрокиНастройкиОплаты");
	СтруктураОплаты.Вставить("НомерТранзакции");
	СтруктураОплаты.Вставить("НомерБанковскойКарты");
	
	Возврат СтруктураОплаты;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьЗначениеСвойстваJSON(Курсор)
	Пока Курсор.Прочитать() Цикл
		Если Курсор.ТипТекущегоЗначения <> ТипЗначенияJSON.ИмяСвойства Тогда
			Возврат Курсор.ТекущееЗначение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция СоответствиеЗаголовков()
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept-Language", "ru");
	Заголовки.Вставить("Accept-Charset", "utf-8");
	Заголовки.Вставить("Content-Language", "ru");
	Заголовки.Вставить("Content-Charset", "utf-8");
	Заголовки.Вставить("Content-Type", "text/json; charset=UTF-8");
	
	Возврат Заголовки;
	
КонецФункции

Процедура ЗаписатьСвойствоИЗначениеJSON(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства)
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
КонецПроцедуры

Процедура ЗаписатьСвойствоИмяПользователя(ЗаписьJSON, ИмяПользователя)
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("C");
		ЗаписатьСвойствоИЗначениеJSON(ЗаписьJSON, "cm", ИмяПользователя);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
КонецПроцедуры



Функция ТелоЗапросаФискальныйЧек(ТаблицаНоменклатуры, ПараметрыОплаты, ИмяПользователя, ВозвратныйЧек)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Если ВозвратныйЧек = Истина Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("R");
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства("F");
	КонецЕсли;
	
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		ЗаписатьСвойствоИмяПользователя(ЗаписьJSON, ИмяПользователя);
		
		Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("S");
			
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
					ЗаписьJSON.ЗаписатьИмяСвойства("qty");
					ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.Количество);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("price");
					ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.Цена);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("name");
					ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.НаименованиеНоменклатуры);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("code");
					ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.КодНоменклатуры);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("tax");
					ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.ЗначениеНалоговойГруппы);
					
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			Если СтрокаТаблицы.ЕстьСкидка = Перечисления.ngn707ts_ТипыСкидок.Скидка Тогда
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("D");
				
					ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
						Если СтрокаТаблицы.СуммаСкидки <> 0 Тогда
							ЗаписьJSON.ЗаписатьИмяСвойства("sum");
							СуммаСкидки = Число(СтрокаТаблицы.СуммаСкидки);
							Если СуммаСкидки > 0 Тогда
								СуммаСкидки = СуммаСкидки * (-1);
							КонецЕсли;
							ЗаписьJSON.ЗаписатьЗначение(СуммаСкидки);
						ИначеЕсли СтрокаТаблицы.ПроцентСкидки <> 0 Тогда
							ЗаписьJSON.ЗаписатьИмяСвойства("prc");
							ПроцентСкидки = Число(СтрокаТаблицы.ПроцентСкидки);
							Если ПроцентСкидки > 0 Тогда
								ПроцентСкидки = ПроцентСкидки * (-1);
							КонецЕсли;
							ЗаписьJSON.ЗаписатьЗначение(ПроцентСкидки);
						КонецЕсли;
						
					ЗаписьJSON.ЗаписатьКонецОбъекта();
						
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			ИначеЕсли СтрокаТаблицы.ЕстьСкидка = Перечисления.ngn707ts_ТипыСкидок.Наценка Тогда
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("D");
				
					ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
						Если СтрокаТаблицы.СуммаСкидки <> 0 Тогда
							ЗаписьJSON.ЗаписатьИмяСвойства("sum");
							СуммаНаценки = Число(СтрокаТаблицы.СуммаСкидки);
							Если СуммаНаценки < 0 Тогда
								СуммаНаценки = СуммаНаценки * (-1);
							КонецЕсли;
							ЗаписьJSON.ЗаписатьЗначение(СуммаНаценки);
						ИначеЕсли СтрокаТаблицы.ПроцентСкидки <> 0 Тогда
							ЗаписьJSON.ЗаписатьИмяСвойства("prc");
							ПроцентНаценки = Число(СтрокаТаблицы.ПроцентСкидки);
							Если ПроцентНаценки < 0 Тогда
								ПроцентНаценки = ПроцентНаценки * (-1);
							КонецЕсли;
							ЗаписьJSON.ЗаписатьЗначение(ПроцентНаценки);
						КонецЕсли;
						
					ЗаписьJSON.ЗаписатьКонецОбъекта();
						
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
			ЗаписьJSON.ЗаписатьИмяСвойства("P");
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
				Если ПараметрыОплаты.Свойство("СуммаОплаты") И ПараметрыОплаты.СуммаОплаты <> 0 Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("sum");
					ЗаписьJSON.ЗаписатьЗначение(ПараметрыОплаты.СуммаОплаты);				
				КонецЕсли;
				
				Если ПараметрыОплаты.Свойство("НомерСтрокиНастройкиОплаты") И НЕ ПустаяСтрока(ПараметрыОплаты.НомерСтрокиНастройкиОплаты) Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("no");
					ЗаписьJSON.ЗаписатьЗначение(ПараметрыОплаты.НомерСтрокиНастройкиОплаты);
				КонецЕсли;
				
				Если ПараметрыОплаты.Свойство("НомерТранзакции") И НЕ ПустаяСтрока(ПараметрыОплаты.НомерТранзакции) Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("rrn");
					ЗаписьJSON.ЗаписатьЗначение(ПараметрыОплаты.НомерТранзакции);				
				КонецЕсли;
				
				Если ПараметрыОплаты.Свойство("НомерБанковскойКарты") И НЕ ПустаяСтрока(ПараметрыОплаты.НомерБанковскойКарты) Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("card");
					ЗаписьJSON.ЗаписатьЗначение(ПараметрыОплаты.НомерБанковскойКарты);				
				КонецЕсли;

			ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ТелоЗапросаВнесенияИзъятияДенег(СуммаСлужебнойОперации, ИмяПользователя, Изъять)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("IO");
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
				ЗаписатьСвойствоИмяПользователя(ЗаписьJSON, ИмяПользователя);
			
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				    ЗаписьJSON.ЗаписатьИмяСвойства("IO");
					ЗаписатьСвойствоИЗначениеJSON(ЗаписьJSON, "sum", Число(?(Изъять = Истина, "-", "") + Формат(СуммаСлужебнойОперации,"ЧДЦ=2; ЧРД=.; ЧГ=")));
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции


Функция ВнестиИзъятьДеньгиИзСейфа(ПараметрыПодключения, СуммаСлужебнойОперации, ИмяПользователя, Изъять = Ложь)
	
	URL 			= "cgi/chk";
	Метод   		= "POST";
	Authorization 	= ngn707ts_АвторизацияСервер.ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод);	
	ТелоЗапроса 	= ТелоЗапросаВнесенияИзъятияДенег(СуммаСлужебнойОперации, ИмяПользователя, Изъять);
	
	Заголовки = СоответствиеЗаголовков();
	Заголовки.Вставить("Authorization", Authorization);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер
						,
						,
						,
						,
						,
						2);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если ПроверитьКодОтветаКА(Ответ) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьТелоОтветаКА(Ответ) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция ПроверитьТелоОтветаКА(Ответ)
	
	РезультатыАнализа = АнализОтветаКассовогоАппарата(Ответ);
	Если РезультатыАнализа.ОперацияВыполнена = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаОшибок  = ТаблицаОшибок();
	ТекстСообщения = "";
	
	Для Каждого КодОшибки Из РезультатыАнализа.КодыОшибок Цикл
		
		ТекстСообщения = ТекстСообщения + НСтр("ru='Код ошибки:'; uk='Код помилки:'");
		ТекстСообщения = ТекстСообщения + КодОшибки;
		
		СтруктураПоиска = Новый Структура("КодОшибки", КодОшибки);
		РезультатПоиска = ТаблицаОшибок.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			ШаблонТекста = НСтр("ru='. Текст ошибки: %1'; uk='. Текст помилки: %2'");
			ТекстСообщения = ТекстСообщения + СтрЗаменить(СтрЗаменить(ШаблонТекста, "%1", РезультатПоиска[0].ТекстОшибки_RU), "%2", РезультатПоиска[0].ТекстОшибки_UA);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция АнализОтветаКассовогоАппарата(Ответ)
	
	СтруктураОтвета = СтруктураАнализаОтвета();
	ТелоОтвета		= Ответ.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ЧтениеJSON.ТекущееЗначение = "err" Тогда
			Пока ЧтениеJSON.Прочитать() Цикл
				Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ЧтениеJSON.ТекущееЗначение = "e" Тогда
					ЧтениеJSON.Прочитать();
					СтруктураОтвета.ОперацияВыполнена = Ложь;
					СтруктураОтвета.КодыОшибок.Добавить(ЧтениеJSON.ТекущееЗначение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Строит соответствие кодов ошибок, которые есть в прошивке кассового аппарата.
//
// Возвращаемое значение:
//  ТаблицаЗначение из кодами ошибок:
//		* КодОшибки 		- Строка - код ошибки в тестовом формате.
//		* ТекстОшибки_RU 	- Строка - описание ошибки на русском языке.
//		* ТекстОшибки_UA	- Строка - описание ошибки на украинском языке.
//
Функция ТаблицаОшибок()

	// TODO: Необходимо переделать на получение данных из самого аппарата.
	// Получается по адресу  http://адрес_КА/desc.
	// Для расшифровки результирующих данных необходим алгоритм inflate.
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("КодОшибки", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки_RU", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки_UA", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x01";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Цена не указана.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru='Ціна не вказана.'; uk='Ціна не вказана.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x02";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Количество не указано.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru='Кількість не вказана.'; uk='Кількість не вказана.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x03";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Отдел не указан.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru='Відділ не вказаний.'; uk='Відділ не вказаний.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x04";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Группа не указана.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Група не вказана.'; uk = 'Група не вказана.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x25";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нет бумаги.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Відсутній папір.'; uk = 'Відсутній папір.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x31";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Пользователь уже зарегистрирован.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Користувач уже зареєстрований.'; uk = 'Користувач уже зареєстрований.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x32";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный пароль.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний пароль.'; uk = 'Неправильний пароль.'");

	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x33";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный номер таблицы.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний номер таблиці.'; uk = 'Неправильний номер таблиці.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x34";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Доступ к таблице запрещен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Доступ до таблиці заборонений.'; uk = 'Доступ до таблиці заборонений.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x35";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Умолчание не найдено.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Значення по замовчуванню не знайдено.'; uk = 'Значення по замовчуванню не знайдено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x36";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный индекс.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний індекс.'; uk = 'Неправильний індекс.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x37";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверное поле.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильне поле.'; uk = 'Неправильне поле.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x38";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Таблица переполнена.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Таблиця переповнена.'; uk = 'Таблиця переповнена.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x39";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная длина двоичных данных.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна довжина двійкових даних.'; uk = 'Неправильна довжина двійкових даних.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3A";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Попытка модификации поля только для чтения.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Спроба зміни поля тільки на читання.'; uk = 'Спроба зміни поля тільки на читання.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3B";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверное значение поля.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильне значення поля.'; uk = 'Неправильне значення поля.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3C";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Товар уже существует.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Товар вже існує.'; uk = 'Товар вже існує.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3D";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='По товару были продажи.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'По товару вже були продажі.'; uk = 'По товару вже були продажі.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3E";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Запрос запрещен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Запит заборонений.'; uk = 'Запит заборонений.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x3F";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная закладка.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна закладка.'; uk = 'Неправильна закладка.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x40";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Ключ не найден.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Ключ не знайдено.'; uk = 'Ключ не знайдено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x41";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Процедура уже исполняется.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Процедура вже виконується.'; uk = 'Процедура вже виконується.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x42";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Количество товара отрицательно.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Від''ємна кількість товару.'; uk = 'Від''ємна кількість товару.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x43";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Включено перенаправление с карты памяти.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Увімкнено перенаправлення із карти пам''яті.'; uk = 'Увімкнено перенаправлення із карти пам''яті.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x87";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Ошибка фискальной памяти.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Помилка фіскальної пам''яті.'; uk = 'Помилка фіскальної пам''яті.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x88";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Ошибка карты памяти.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Помилка карти пам''яті.'; uk = 'Помилка карти пам''яті.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x89";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Переполнение карты памяти.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Переповнення карти пам''яті.'; uk = 'Переповнення карти пам''яті.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x8B";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нет бумаги.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Відсутній папір.'; uk = 'Відсутній папір.'");

	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x8C";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Переполнение фискальной памяти.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Переповнення фіскальної пам''яті.'; uk = 'Переповнення фіскальної пам''яті.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "x8D";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Выдача сдачи запрещена.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Видача решти заборонена.'; uk = 'Видача решти заборонена.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xA3";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Операция прекращена устройством.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Операція завершена пристроєм.'; uk = 'Операція завершена пристроєм.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xA5";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Дневной отчет не найден.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Денний звіт не знайдено.'; uk = 'Денний звіт не знайдено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xA7";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='MMC запрещено.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'MMC заборонено.'; uk = 'MMC заборонено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xBB";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Лента не пуста.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Стрічка не порожня.'; uk = 'Стрічка не порожня.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xBC";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Режим тренировки.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Режим тренування.'; uk = 'Режим тренування.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xBD";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Текущая дата неверна.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Поточна дата не правильна.'; uk = 'Поточна дата не правильна.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xBE";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Запрещено изменение времени.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Заборонено зміну часу.'; uk = 'Заборонено зміну часу.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC1";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный номер налога.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний номер податку.'; uk = 'Неправильний номер податку.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC2";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный параметр у процедуры.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний номер у процедурі.'; uk = 'Неправильний номер у процедурі.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC3";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Режим фискального принтера не активен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Режим фіскального принтера не активний.'; uk = 'Режим фіскального принтера не активний.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC4";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Изменялось название товара или его налог.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Змінювалась назва товару чи його податок.'; uk = 'Змінювалась назва товару чи його податок.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC5";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Необходима персонализация.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Необхідна персоналізація.'; uk = 'Необхідна персоналізація.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC6";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Отсутствует обмен с сервером НСМЭП на протяжении 72 часов.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Відсутній обін із сервером НСМЕП на протязі 72 годин.'; uk = 'Відсутній обін із сервером НСМЕП на протязі 72 годин.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC7";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Запрещено обнуление данных ЭКЛ.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Заборонено онулення даних ЕКЛ.'; uk = 'Заборонено онулення даних ЕКЛ.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC8";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Запрещена работа с GPRS модемом.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Заборонена робота із GPRS модемом.'; uk = 'Заборонена робота із GPRS модемом.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xC9";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Ошибка в хранилище данных.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Помилка в сховищі даних.'; uk = 'Помилка в сховищі даних.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xCB";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Запрещена операция продажи.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Заборонена операція продажу.'; uk = 'Заборонена операція продажу.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xCC";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Начата операция возврата.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Розпочата операція повернення.'; uk = 'Розпочата операція повернення.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xCE";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не установлены налоговые ставки.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Не встановленні податкові ставки.'; uk = 'Не встановленні податкові ставки.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xCF";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не выведен отчет Z1.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Не виведений звіт Z1.'; uk = 'Не виведений звіт Z1.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD0";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не сделана инкассация денег.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Не проведена інкасація готівки.'; uk = 'Не проведена інкасація готівки.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD1";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Сейф не закрыт.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Сейф не зачинений.'; uk = 'Сейф не зачинений.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD2";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Печать ленты прервана.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Друк стрічки перервано.'; uk = 'Друк стрічки перервано.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD3";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Достигнут конец текущей смены, или изменилась дата.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Досягнено кінця поточної зміни, чи змінилась дата.'; uk = 'Досягнено кінця поточної зміни, чи змінилась дата.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD4";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не указано значение процентной скидки по умолчанию.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Не вказано значення процентової знижки по замовчуванню.'; uk = 'Не вказано значення процентової знижки по замовчуванню.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD5";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не указано значение скидки по умолчанию.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Не вказано значення знижки по замовчуванню.'; uk = 'Не вказано значення знижки по замовчуванню.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD6";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Дневной отчет не выведен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Денний звіт не виведено.'; uk = 'Денний звіт не виведено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD7";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Дневной отчет уже выведен (и пуст).'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Денний звіт вже виведений і порожній.'; uk = 'Денний звіт вже виведений і порожній.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD8";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нельзя отменить товар на который сделана скидка без ее предварительной отмены.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неможливо відмінити товар на який зроблена знижка без її попередньої відміни.'; uk = 'Неможливо відмінити товар на який зроблена знижка без її попередньої відміни.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xD9";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Товар не продавался в этом чеке.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Товар не продавався в цьому чеці.'; uk = 'Товар не продавався в цьому чеці.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDA";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нечего отменять.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Нема що відміняти.'; uk = 'Нема що відміняти.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDB";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Отрицательная сумма продажи товара.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Від''ємна сумма продажу товару.'; uk = 'Від''ємна сумма продажу товару.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDC";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный процент.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний відсоток.'; uk = 'Неправильний відсоток.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDD";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нет ни одной продажи.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Нема ні однієї продажі.'; uk = 'Нема ні однієї продажі.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDE";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Скидки запрещены.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Знижки заборонені.'; uk = 'Знижки заборонені.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xDF";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная сумма платежа.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна сумма оплати.'; uk = 'Неправильна сумма оплати.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE0";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Тип оплаты не предполагает введения кода клиента.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Тип оплати не передбачає вводу коду клієнта.'; uk = 'Тип оплати не передбачає вводу коду клієнта.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE1";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная сумма платежа.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна сума оплати.'; uk = 'Неправильна сума оплати.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE2";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Идет оплата чека.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Іде оплата чека.'; uk = 'Іде оплата чека.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE3";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Товар закончился.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Товар закінчився.'; uk = 'Товар закінчився.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE4";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Номер группы не может меняться.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Номер групи не може змінюватись.'; uk = 'Номер групи не може змінюватись.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE5";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная группа.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна группа.'; uk = 'Неправильна группа.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE6";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Номер отдела не может меняться.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Номер відділу не може змінюватись.'; uk = 'Номер відділу не може змінюватись.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE7";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверный отдел.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильний відділ.'; uk = 'Неправильний відділ.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE8";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нулевое произведение количества на цену.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Нульовий добуток кількості на ціну.'; uk = 'Нульовий добуток кількості на ціну.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xE9";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Переполнение внутренних сумм.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Переповнення внутрішніх сум.'; uk = 'Переповнення внутрішніх сум.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xEA";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Дробное количество запрещено.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Дробова кількість заборонена.'; uk = 'Дробова кількість заборонена.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xEB";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверное количество.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна кількість.'; uk = 'Неправильна кількість.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xEC";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Цена не может быть изменена.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Ціна не може бути змінена.'; uk = 'Ціна не може бути змінена.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xED";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Неверная цена.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неправильна ціна.'; uk = 'Неправильна ціна.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xEE";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Товар не существует.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Товар не існує.'; uk = 'Товар не існує.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xEF";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Начат чек внесения-изъятия денег.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Розпочатий чек внесення-вилучення готівки.'; uk = 'Розпочатий чек внесення-вилучення готівки.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF0";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Чек содержит продажи.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Чек містить продажі.'; uk = 'Чек містить продажі.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF1";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Не существующий или запрещенный тип оплаты.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Неіснуючий або заборонений тип оплати.'; uk = 'Неіснуючий або заборонений тип оплати.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF2";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Поле в строке переполнено.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Поле в рядку переповнене.'; uk = 'Поле в рядку переповнене.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF3";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Отрицательная сумма по дневному отчету.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Від''ємна сумма по денному звіту.'; uk = 'Від''ємна сумма по денному звіту.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF4";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Отрицательная сумма по чеку.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Від''ємна сумма по чеку.'; uk = 'Від''ємна сумма по чеку.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF5";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Чек переполнен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Чек переповнено.'; uk = 'Чек переповнено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF6";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Дневной отчет переполнен.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Денний звіт переповнено.'; uk = 'Денний звіт переповнено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF7";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Чек для копии не найден.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Чек для копії не знайдено.'; uk = 'Чек для копії не знайдено.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF8";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Оплата чека не завершена.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Оплата чеку не завершена.'; uk = 'Оплата чеку не завершена.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xF9";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Кассир не зарегистрирован.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Касир не зареєстрований.'; uk = 'Касир не зареєстрований.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFA";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='У кассира нет прав на эту операцию.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'У касира відсутні права на дану операцію.'; uk = 'У касира відсутні права на дану операцію.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFB";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нефискальный чек не открыт.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Нефіскальний чек не відкритий.'; uk = 'Нефіскальний чек не відкритий.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFC";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Чек не открыт.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Чек не відкритий.'; uk = 'Чек не відкритий.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFD";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Нефискальный чек уже открыт.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Нефіскальний чек уже відкритий.'; uk = 'Нефіскальний чек уже відкритий.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFE";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Чек уже открыт.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Чек вже відкритий.'; uk = 'Чек вже відкритий.'");
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.КодОшибки = "xFF";
	НоваяСтрока.ТекстОшибки_RU = НСтр("ru='Переполнение ленты.'");
	НоваяСтрока.ТекстОшибки_UA = НСтр("ru = 'Переповнення стрічки.'; uk = 'Переповнення стрічки.'");
	
	Возврат ТаблицаОшибок;

КонецФункции // ТаблицаОшибок()

Функция СтруктураАнализаОтвета()
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ОперацияВыполнена", Истина);
	СтруктураОтвета.Вставить("КодыОшибок", Новый Массив);
	
	Возврат СтруктураОтвета;
	
КонецФункции


Функция ПроверитьКодОтветаКА(Ответ)
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстИсключения = НСтр("ru='Возникла неопознанная ошибка в кассовом аппарате. Служебное сообщение:';
		|uk='Виникла неопізнана помилка в касовому апараті. Службове повідомлення:'");
		ТекстИсключения = ТекстИсключения + ОписаниеОшибки() + Ответ.ПолучитьТелоКакСтроку();;
		ВызватьИсключение ТекстИсключения;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти