
#Область ПрограммныйИнтерфейс

// Возвращает структуру-шаблон из полями для выполнения авторизации
// на кассовом апарате.
//
// Возвращаемое значение:
//	Структура которая содержит свойства:
//		* Сервер - имя или ip-адрес касовго апарата.
//		* Логин  - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//
Функция ПолучитьСтруктуруПараметровПодключения() Экспорт
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Сервер");
	ПараметрыПодключения.Вставить("Логин");
	ПараметрыПодключения.Вставить("Пароль");
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Возвращает заголовки realm и nonce и opaque для авторизации пользователя при 
// выполнении операций из кассовым аппаратом. Заголовоки необходимо сохранить 
// на весь сеанс работы пользователя.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер 	 - имя или ip-адрес касовго апарата.
//		* Логин  	 - логин под которым пользователь выполняет операции
//				   	   из кассовым аппаратом.
//		* Пароль 	 - пароль под которым пользователь выполняет операции
//				   	   из кассовым аппаратом.
//
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* realm  - служебный заголовок realm.
//		* nonce  - служебный заголовок nonce.
//		* opaque - служебный заголовок nonce.
//	Неопределено - если возникли ошибки.
//
Функция ПолучитьСлужебныеЗаголовкиАвторизации(ПараметрыПодключения, URL, Метод) Экспорт
		
	Если ПроверитьСтруктуруПараметрыПодключения(ПараметрыПодключения) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаголовокАутентификации = Ответ.Заголовки.Получить("WWW-Authenticate");
	Если ЗаголовокАутентификации = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не удалось получить заголовок для формирования аутентификации.'; uk='Не вдалося отримати заголовок для формування аутентифікації.'");
		Возврат Неопределено;
	КонецЕсли;
	
	realm  = "";
	nonce  = "";
	opaque = "";
	
	Заполнить_realm_nonce(ЗаголовокАутентификации, realm, nonce, opaque);
	
	Если ПустаяСтрока(realm) Тогда
		ВызватьИсключение НСтр("ru='Не удалось получить заголовок realm.'; uk='Не вдалося отримати заголовок realm.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(nonce) Тогда
		ВызватьИсключение НСтр("ru='Не удалось получить заголовок nonce'; uk='Не вдалося отримати заголовок nonce.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(opaque) Тогда
		ВызватьИсключение НСтр("ru='Не удалось получить заголовок opaque'; uk='Не вдалося отримати заголовок opaque.");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("realm, nonce, opaque", realm, nonce, opaque);
	
КонецФункции

// Возвращает заголовок для прохождения авторизации на кассовм аппарате.
//
// Параметры:
//	ПараметрыПодключения - Структура - содержит свойства:
//		* Сервер - имя или ip-адрес касовго апарата.
//		* Логин  - логин под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//		* Пароль - пароль под которым пользователь выполняет операции
//				   из кассовым аппаратом.
//  СлужебныеЗаголовки - структура которая содержит свойства:
//		* realm - служебный заголовок realm.
//		* nonce - служебный заголвоок nonce.
//	URL - Строка - адрес по которому будет выполняться запрос (например cgi/status).
//	Метод - Строка - метод которые будет выполняться на кассовом аппарате ( GET, POST ... ).
//
// Возвращаемое значение:
//	Строка - содержит заголвок для авторизации на кассовом аппарате.
//
Функция ПолучитьЗаголовокДайджестАвторизации(ПараметрыПодключения, URL, Метод) Экспорт
	
	Если ПроверитьСтруктуруПараметрыПодключения(ПараметрыПодключения) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СлужебныеЗаголовки = ПолучитьСлужебныеЗаголовкиАвторизации(ПараметрыПодключения, URL, Метод);
	Если СлужебныеЗаголовки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	А1 			= "%Логин%:%realm%:%Пароль%";
	А2 			= "%Метод%:/%URL%";
	response    = "%HA1%:%nonce%:%nonceCount%:%cnonce%:auth:%HA2%";
	nonceCount	= "00000001";
	cnonce		= НРег(ngn707ts_СервисныеФункции.ПолучитьХешМД5(Строка(ТекущаяДата()))); // генерируем псевдо случайные значения для ключа
	
	А1 = СтрЗаменить(А1, "%Логин%", ПараметрыПодключения.Логин);
	А1 = СтрЗаменить(А1, "%realm%", СлужебныеЗаголовки.realm);
	А1 = СтрЗаменить(А1, "%Пароль%", ПараметрыПодключения.Пароль);
	
	А2 = СтрЗаменить(А2, "%Метод%", Метод);
	А2 = СтрЗаменить(А2, "%URL%", URL);
	
	HA1 = ngn707ts_СервисныеФункции.ПолучитьХешМД5(А1);
	HA2 = ngn707ts_СервисныеФункции.ПолучитьХешМД5(А2);
	
	response = СтрЗаменить(response, "%HA1%", НРег(HA1));
	response = СтрЗаменить(response, "%HA2%", НРег(HA2));
	response = СтрЗаменить(response, "%nonce%", СлужебныеЗаголовки.nonce);
	response = СтрЗаменить(response, "%nonceCount%", nonceCount);
	response = СтрЗаменить(response, "%cnonce%", cnonce);
	
	response = НРег(ngn707ts_СервисныеФункции.ПолучитьХешМД5(response));
	
	Authorization = "Digest username=""" 
						+ ПараметрыПодключения.Логин 
						+ """, realm=""" 
						+ СлужебныеЗаголовки.realm 
						+ """, nonce=""" 
						+ СлужебныеЗаголовки.nonce 
						+ """, uri=""/%URL%"", algorithm=""MD5"", response=""" 
						+ НРег(response)
						+ """, opaque="""
						+ СлужебныеЗаголовки.opaque
						+ """, qop=""auth"""
						+ ", nc=""" + nonceCount + """"
						+ ", cnonce=""" + cnonce + """";
	
	Authorization = СтрЗаменить(Authorization, "%URL%", URL);					
						
	Возврат Authorization;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьСтруктуруПараметрыПодключения(ПараметрыПодключения)
	
	Если ТипЗнч(ПараметрыПодключения) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Структура <ПараметрыПодключения> имеет неверный тип данных.'; uk='Структура <ПараметрыПодключения> має невірний тип даних.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("Сервер") = Ложь Тогда
		ВызватьИсключение НСтр("ru='В структуре <ПараметрыПодключения> нету свойства <Сервер>.'; uk='В структурі <ПараметрыПодключения> відсутня властивість <Сервер>.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыПодключения.Сервер) = Истина Тогда
		ВызватьИсключение НСтр("ru='В структуре <ПараметрыПодключения> не заполнено свойство <Сервер>.'; uk='В структурі <ПараметрыПодключения> не заповнена властивість <Сервер>.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("Логин") = Ложь Тогда
		ВызватьИсключение НСтр("ru='В структуре <ПараметрыПодключения> нету свойства <Логин>.'; uk='В структурі <ПараметрыПодключения> відсутня властивість <Логин>.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("Пароль") = Ложь Тогда
		ВызватьИсключение НСтр("ru='В структуре <ПараметрыПодключения> нету свойства <Пароль>.'; uk='В структурі <ПараметрыПодключения> відсутня властивість <Пароль>.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура Заполнить_realm_nonce(ЗаголовокАутентификации, realm, nonce, opaque)
	
	МассивПодзаголовоков = СтрРазделить(ЗаголовокАутентификации, ",");
	
	Для каждого ПодзаголовокИзМассива Из МассивПодзаголовоков Цикл
		Если СтрНайти(ПодзаголовокИзМассива, "Digest realm=") > 0 Тогда
			realm = СокрЛП(СтрЗаменить(СтрЗаменить(ПодзаголовокИзМассива, "Digest realm=", ""), """", ""));
		КонецЕсли;
		Если СтрНайти(ПодзаголовокИзМассива, "nonce=") > 0 Тогда
			nonce = СокрЛП(СтрЗаменить(СтрЗаменить(ПодзаголовокИзМассива, "nonce=", ""), """", ""));
		КонецЕсли;
		Если СтрНайти(ПодзаголовокИзМассива, "opaque=") > 0 Тогда
			opaque = СокрЛП(СтрЗаменить(СтрЗаменить(ПодзаголовокИзМассива, "opaque=", ""), """", ""));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти